Step-by-Step Guide: Set Up HTTPS for Your Domain Using Nginx and Certbot
 Guide to Setting Up HTTPS with Nginx and Certbot
 
 What is Nginx?

 Nginx is a powerful web server. It can:
 Serve your website's HTML, CSS, and images
 Work as a reverse proxy, forwarding traffic to backend applications (like Django)
 Handle HTTPS (SSL) encryption
 Act as a load balancer or cache
 
 We’ll use Nginx to send browser requests to your Django app and to manage HTTPS using SSL certificates.
 
 Step 1: Install Nginx
 sudo apt update
 sudo apt install nginx -y
 
 Step 2: Allow Firewall Access
 sudo ufw allow 'Nginx Full'
 sudo ufw enable
 
 Step 3: Install Certbot and Obtain SSL Certificate
 sudo apt install certbot python3-certbot-nginx -y
 sudo certbot --nginx -d manikantadevops.hopto.org
 
 Step 4: Configure Nginx
 sudo nano /etc/nginx/sites-available/djangoapp
 Paste the following:
 server {
    listen 443 ssl;
Step-by-Step Guide: Set Up HTTPS for Your Domain Using Nginx and Certbot
    server_name manikantadevops.hopto.org;
    ssl_certificate /etc/letsencrypt/live/manikantadevops.hopto.org/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/manikantadevops.hopto.org/privkey.pem;
    location / {
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }
 }

///////////////////////////////////////////////

Line                                     | Meaning
listen 443 ssl;                          | This tells Nginx to listen on port 443, which is used for HTTPS connections. The ssl means it’s using SSL encryption.
server_name manikantadevops.hopto.org;   | This is your domain name. When someone opens this domain in their browser, Nginx will use this block to serve it.
ssl_certificate ...                      | This points to the actual SSL certificate file you got from Certbot. It encrypts traffic.
ssl_certificate_key ...                  | This is the private key that matches your SSL certificate. Never share this file!
location / { ... }                       | This part defines what happens when someone visits your domain.
proxy_pass http://127.0.0.1:8000;        | This means: “Send all traffic to your Django app running locally on port 8000.”
proxy_set_header Host $host;             | It passes the original domain name to your app (useful for Django to know the host).
proxy_set_header X-Real-IP $remote_addr; | This sends the real user IP to your Django app (for logs, analytics, etc.).

///////////////////////////////////////////////

 
 Step 5: Enable the Site and Remove Default Config
 sudo ln -s /etc/nginx/sites-available/djangoapp /etc/nginx/sites-enabled/
 sudo rm /etc/nginx/sites-enabled/default
 
 Step 6: Test and Restart Nginx
 sudo nginx -t
 sudo systemctl restart nginx
 
 Step 7: Access Your Site
 Ensure Django is running on port 8000.
 Open: https://manikantadevops.hopto.org
 

 Step 8: Test Certbot Auto Renewal (Optional)
 sudo certbot renew --dry-run
 Note: Always get the SSL certificate with Certbot before configuring Nginx with ssl_certificate paths to avoid
 missing file errors.
